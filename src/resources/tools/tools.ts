// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import * as ComprehendAPI from './comprehend';
import { Comprehend, ComprehendMedicalParams, ComprehendMedicalResponse } from './comprehend';
import { APIPromise } from '../../core/api-promise';
import { RequestOptions } from '../../internal/request-options';
import { path } from '../../internal/utils/path';

export class Tools extends APIResource {
  comprehend: ComprehendAPI.Comprehend = new ComprehendAPI.Comprehend(this._client);

  /**
   * Splits a long block of text (maximum 4000 words) into smaller chunks while
   * preserving the semantic meaning of the text and context between the chunks.
   */
  contextAwareSplitting(
    body: ToolContextAwareSplittingParams,
    options?: RequestOptions,
  ): APIPromise<ToolContextAwareSplittingResponse> {
    return this._client.post('/v1/tools/context-aware-splitting', { body, ...options });
  }

  /**
   * Parse PDF to other formats.
   */
  parsePdf(
    fileID: string,
    body: ToolParsePdfParams,
    options?: RequestOptions,
  ): APIPromise<ToolParsePdfResponse> {
    return this._client.post(path`/v1/tools/pdf-parser/${fileID}`, { body, ...options });
  }
}

export interface ToolContextAwareSplittingResponse {
  /**
   * An array of text chunks generated by splitting the input text based on the
   * specified strategy.
   */
  chunks: Array<string>;
}

export interface ToolParsePdfResponse {
  /**
   * The extracted content from the PDF file, converted to the specified format.
   */
  content: string;
}

export interface ToolContextAwareSplittingParams {
  /**
   * The strategy to be used for splitting the text into chunks. `llm_split` uses the
   * language model to split the text, `fast_split` uses a fast heuristic-based
   * approach, and `hybrid_split` combines both strategies.
   */
  strategy: 'llm_split' | 'fast_split' | 'hybrid_split';

  /**
   * The text to be split into chunks.
   */
  text: string;
}

export interface ToolParsePdfParams {
  /**
   * The format into which the PDF content should be converted.
   */
  format: 'text' | 'markdown';
}

Tools.Comprehend = Comprehend;

export declare namespace Tools {
  export {
    type ToolContextAwareSplittingResponse as ToolContextAwareSplittingResponse,
    type ToolParsePdfResponse as ToolParsePdfResponse,
    type ToolContextAwareSplittingParams as ToolContextAwareSplittingParams,
    type ToolParsePdfParams as ToolParsePdfParams,
  };

  export {
    Comprehend as Comprehend,
    type ComprehendMedicalResponse as ComprehendMedicalResponse,
    type ComprehendMedicalParams as ComprehendMedicalParams,
  };
}
